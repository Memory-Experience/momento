syntax = "proto3";
package sst;

service TranscriptionService {
  // Bidirectional streaming: client sends input (audio or text), server responds with various messages
  // NOTE: This works for Node.js clients but NOT for gRPC-Web (browsers)
  rpc Transcribe(stream MemoryChunk) returns (stream MemoryChunk);
}

// Input chunk from client (either audio or text)
message MemoryChunk {
  oneof data {
    bytes audio_data = 1; // Audio data from microphone
    string text_data = 2; // Text data for direct text input
  }
  ChunkMetadata metadata = 10; // Optional metadata (only sent on first chunk)
}

// Session metadata to indicate the type of session
message ChunkMetadata {
  string session_id = 1;
  string memory_id = 2;
  ChunkType type = 3;
  bool is_final = 4;  // Flag to indicate if this is the final chunk of a particular type
  double score = 5;   // Optional: Relevance score for memories (0.0 to 1.0) - only used for MEMORY chunks
}

enum ChunkType {
  MEMORY = 0;
  QUESTION = 1;
  TRANSCRIPT = 2;
  ANSWER = 3;
}
